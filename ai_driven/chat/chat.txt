# 18 June 2024, 17:41 - Document Settings Folder Selection (Full)

## Start Time: 17:36

## Summary
Redesigned the folder selection functionality in the Document Settings tab after multiple iterations to find a solution that avoids browser upload dialogs. The final implementation uses a dropdown with pre-defined paths and strong client-side validation, eliminating security and usability concerns.

## Modified Files
- `src/components/settings/DocumentSettingsTab.tsx`

## User Requests and Solutions

### Request 1: Fix folder selection dialog showing "Upload" button
**Problem:** The initial folder selection was using the browser's file input with `webkitdirectory` attribute, which displayed an "Upload" button and prompted file uploading instead of directory selection.

**Attempted Solution 1:** Implemented a hidden file input approach using the `webkitdirectory` attribute.
**Result:** Still showed "Upload" button in dialog and didn't provide the expected user experience.

**Attempted Solution 2:** Tried using Electron's native dialog API.
**Result:** Required setting up Electron in a web application context, which was too complex and not suited for this environment.

**Attempted Solution 3:** Used a simple prompt for manual path entry.
**Result:** User wanted a safer approach with validation and didn't trust users to enter paths manually.

**Final Solution:** Implemented a dropdown with pre-defined safe paths and a "Custom..." option with strong path validation:
- Created an array of common, safe Windows paths
- Added Select component with these pre-defined options
- Implemented conditional rendering for custom path input
- Added robust Windows path validation using regex
- Improved error and success messages

### Request 2: Ensure secure and validated path selection
**Problem:** The application was trying to use Node.js file system methods (`fs.existsSync`) for validation in a browser environment, causing errors.

**Solution:**
- Replaced server-side validation with client-side format validation using regex
- Provided clear validation feedback to users
- Used a pre-defined set of safe paths to reduce entry errors
- Added detailed guidance text around path requirements

## Implementation Details

### Pre-defined Safe Paths
```typescript
const DEFAULT_PATHS = [
  "C:\\KFlow\\Documents",
  "C:\\Users\\Public\\Documents\\KFlow",
  "D:\\KFlow\\Documents",
  "C:\\Program Files\\KFlow\\Documents",
  "Custom..."
];
```

### Path Selection Flow
1. User selects from dropdown of pre-defined paths
2. If they choose "Custom...", a text input appears for manual entry
3. Path is validated against Windows path format using regex
4. User receives immediate feedback about path validity
5. Save button is disabled for invalid paths

### Path Validation
```typescript
const validateDocumentPath = async (path: string) => {
  if (!path) {
    setIsPathValid(null);
    setPathMessage('');
    return;
  }
  
  // Basic validation for Windows paths
  const windowsPathRegex = /^[a-zA-Z]:\\(?:[^\\/:*?"<>|\r\n]+\\)*[^\\/:*?"<>|\r\n]*$/;
  if (windowsPathRegex.test(path)) {
    setIsPathValid(true);
    setPathMessage('Η διαδρομή φαίνεται έγκυρη. Το σύστημα θα επιβεβαιώσει την πρόσβαση κατά τη χρήση.');
  } else {
    setIsPathValid(false);
    setPathMessage('Η διαδρομή δεν είναι έγκυρη. Παρακαλώ χρησιμοποιήστε μια έγκυρη διαδρομή Windows.');
  }
};
```

## Development Journey
1. First attempted to use the standard file input with `webkitdirectory` attribute
2. Tried setting up Electron integration for native file dialogs
3. Temporarily used a simple prompt as a fallback solution
4. Settled on the dropdown + validation approach as the best solution for a web application

## Benefits of Final Implementation
1. **Security:** Limited choices reduce the risk of invalid or malicious paths
2. **User Experience:** Simple dropdown interface with clear options
3. **Reliability:** Strong validation prevents invalid path formats
4. **Browser Compatibility:** Works in all browsers without relying on non-standard file APIs
5. **Guidance:** Provides clear instructions and feedback throughout the process

## Remaining TODO Items
None - the implementation is complete and working.

## End Time: 18:41