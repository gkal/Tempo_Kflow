Only when the USER prompts #DONE, create a new .md file in C:\Tempo_Kflow\temp with the prefix of date-time (dd_mm_yyyy_hhmm), and then a short description of the chat.The contents are a summary of what we did in this chat, including modified files. If there is anything left to do, include a section TO DO. At the top of the file include the start time and end time of the chat. The goal of this log is so that it can be used to continue this work in later chats.
Only when the USER prompts #DONEFULL, create a new .md file in C:\Tempo_Kflow\temp with the prefix of date-time (dd_mm_yyyy_hhmm), and then a short description of all the chat files that exist there.The contents are a summary of what we did from all the chats, including modified files. If there is anything left to do, include a section TO DO. At the top of the file include the start time and end time of the chat. The goal of this log is so that it can be used to continue this work in later chats.
====================== Tasks ======================================
1. Create a .md file

2. Add this line to the top of it:
"As you complete tasks and reference relevant files update this file as our memory to help with future tasks."

3. Explain the task to Cursor Agent and have it fill out the core of the file. A transcription app like 
@WisprFlow
 or 
@superwhisperapp
 is great for this. Takes 2 minutes to describe a full feature and the steps needed. Then let Cursor organise the tasks for you neatly in the .md file based on your voice note.

4. Ask Cursor to implement the first task in the file.

5. Once that's done, the .md will be updated with the latest info, and you can ask it to move on to the next and so on.
You could ask Cursor to implement everything in one go, but I prefer to understand what's happening at each stage - correct or approve - and then move on to the next step.

What does this give us?

Every step the .md file gets "smarter" and has all the latest context.

This file is basically our to do list / kanban. It helps prevent the need to explain the same thing over and over. It's our task memory.

It breaks down the tasks into manageable chunks. The same way a productive human works. The same way that AIs like Manus work.
======================================================================================
read the latest file we have create at the chat folder to see our last steps and to understand what we have done so far tell me if you understand it DONT CHANGE THE UI and after you read it

Œ±œÑŒ≠Œ≤Œ±œÉŒµ Œ∫Œ±Œπ ŒµŒ≥Œ∫Œ±œÑŒ¨œÉœÑŒ∑œÉŒµ œÑŒø Node.js Œ±œÄœå https://nodejs.org/en
Go to c:\
git clone https://github.com/gkal/Tempo_Kflow
cd Tempo_Kflow
npm ci
Œ¥Œ∑ŒºŒπŒøœçœÅŒ≥Œ∑œÉŒµ Œ≠ŒΩŒ± ŒΩŒ≠Œø Œ±œÅœáŒµŒØŒø .env œÉœÑŒ∑ŒΩ ŒØŒ¥ŒπŒ± œÑŒøœÄŒøŒ∏ŒµœÉŒØŒ± Œ∫Œ±Œπ œÄœÅœåœÉŒ∏ŒµœÉŒµ œÑŒπœÇ Œ±œÄŒ±œÅŒ±ŒØœÑŒ∑œÑŒµœÇ ŒºŒµœÑŒ±Œ≤ŒªŒ∑œÑŒ≠œÇ.
VITE_SUPABASE_URL=https://upbxwrjsxkiyqgqzihei.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVwYnh3cmpzeGtpeXFncXppaGVpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAxOTg4MzMsImV4cCI6MjA1NTc3NDgzM30.n3ROVGXoZRGD8yqppwOnvoSrpI6NK-6CqyDQg9bAmfU
npm run dev
Run for all network computers
npm run dev -- --host
--------------------------
how to push code to gitub
--------------------------
check to see how many files have changed
git status
to push the files that shown as changed
git add .
git commit -m ""
git push
-----------------------------
How to pull code from github
-----------------------------
cd C:\Tempo_Kflow
git status
git pull origin main


-------------------------
Build for production and development
------------------------------------
production	1.npm run build		2. npm run serve
----------
database schema changes
----------------------
npm run update-schema
Development server
------------------
npm run dev
======================
RULES general
=================
You are a Senior and the BEST Front-End Developer and an Expert in ReactJS, NextJS, JavaScript, TypeScript, HTML, CSS and modern UI/UX frameworks (e.g., TailwindCSS, Shadcn, Radix). You are thoughtful, give nuanced answers, and are brilliant at reasoning. You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning.

- Follow the user‚Äôs requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo‚Äôs, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

### Code Implementation Guidelines
Follow these rules when you write code:
- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
- Use ‚Äúclass:‚Äù instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a ‚Äúhandle‚Äù prefix, like ‚ÄúhandleClick‚Äù for onClick and ‚ÄúhandleKeyDown‚Äù for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex=‚Äú0‚Äù, aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, ‚Äúconst toggle = () =>‚Äù. Also, define a type if possible.
- Use Supabase MCP to verify your knowledge of any backend schema or data.
- Only when the USER prompts #DONE, create a new .md file in C:\Tempo_Kflow\ai_driven\chat 
    with the prefix of date-time (dd_mm_yyyy_hhmm), and then a short description of the chat 
    The contents are a summary of what we did in this chat, including modified files, including
    what user request and the solutions you proposed. 
    If there is anything left to do, include a section TO DO. 
    At the top of the file include the start time and end time of the chat. 
    The goal of this log is so that it can be used to continue this work in later chats.
- Only when the USER prompts #DONEFULL, create a new .md file in C:\Tempo_Kflow\ai_driven\chat 
   with the prefix of date-time (dd_mm_yyyy_hhmm), and then a short description of the chat.
   The contents are a summary of what we did in this chat, including modified files, including
   what user request and the solutions you proposed. 
   Then a short description of the last chat file that exist there  
   The contents are a summary of what we did from all the chats, including modified files. 
   If there is anything left to do, include a section TO DO. 
   At the top of the file include the start time and end time of the chat. 
   The goal of this log is so that it can be used to continue this work in later chats. 
   After you create the file, delete all the chat files that exist there without asking for permission. 
   And keep only the last

### üîÑ Project Awareness & Context
-  ** At the folder C:\Tempo_Kflow\ai_driven\ store the PLANNING.md and TASK.md
- **Always read `PLANNING.md`** at the start of a new conversation to understand the project's architecture, goals, style, and constraints.
- **Check `TASK.md`** before starting a new task. If the task isn‚Äôt listed, add it with a brief description and today's date.
- **Use consistent naming conventions, file structure, and architecture patterns** as described in `PLANNING.md`.

### üß± Code Structure & Modularity
- **Never create a file longer than 500 lines of code.** If a file approaches this limit, refactor by splitting it into modules or helper files.
- **Organize code into clearly separated modules**, grouped by feature or responsibility.
- **Use clear, consistent imports** (prefer relative imports within packages).

### ‚úÖ Task Completion
- **Mark completed tasks in `TASK.md`** immediately after finishing them.
- Add new sub-tasks or TODOs discovered during development to `TASK.md` under a ‚ÄúDiscovered During Work‚Äù section

### üìö Documentation & Explainability
- **Update `README.md`** when new features are added, dependencies change, or setup steps are modified.
- **Comment non-obvious code** and ensure everything is understandable to a mid-level developer.
- When writing complex logic, **add an inline `# Reason:` comment** explaining the why, not just the what.